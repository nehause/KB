<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kbbook.shop.modules.order.OrderMapper">

    <resultMap id="resultMapObj" type="com.kbbook.shop.modules.order.Order"></resultMap>

	<select id="selectList" resultMap="resultMapObj">
		<include refid="Base.selectListUpperForMysql" />
		SELECT
			a.*
		   ,b.name as memberName
		   ,(select
		   case
		   when count(d.name) = 1 then d.name
		   when count(d.name) > 1 then concat(min(d.name) , ' 외 ' , cast(COUNT(name) as char)-1 , ' 건' )
		   end
		   FROM purchase_book c
		   JOIN book d on d.bookSeq = c.book_bookSeq
		   where 1=1
			and purchase_purchaseSeq = purchaseSeq
		   )as purchaseBook
		   ,(select
			case	
			when count(c.count) = 1 then concat(c.count, '권')
		    when count(c.count) > 1 then concat(max(c.count) , '권 외 ' , cast(COUNT(name) as char)-1 , ' 건' )
			end
		   FROM purchase_book c
		   JOIN book d on d.bookSeq = c.book_bookSeq
		   where 1=1
			and purchase_purchaseSeq = purchaseSeq
		   )as purchaseCount
		   ,(select
		   sum(c.price)
		   from purchase_book c
		   where 1=1
			and purchase_purchaseSeq = purchaseSeq
		   group by purchaseSeq
		   ) as priceSum
		<include refid="selectCommon" />
		ORDER BY purchaseSeq DESC
		<include refid="Base.selectListLowerForMysql" />
	</select>
	
	<sql id ="selectCommon">
	FROM purchase a
	JOIN member b on a.member_memberSeq = b.memberSeq
	where 1=1
		<if test="searchDelNy != null and !searchDelNy.equals('')">AND a.delNy = #{searchDelNy}</if>
		<if test="searchPayment != null and !searchPayment.equals('')">AND a.payment = #{searchPayment}</if>
		<if test="searchPurchaseStatus != null and !searchPurchaseStatus.equals('')">AND a.purchaseStatus = #{searchPurchaseStatus}</if>
		<choose>
			<when test="searchOption == 1">AND a.purchaseSeq = #{searchValue}</when>
			<when test="searchOption == 2">AND a.member_memberSeq = #{searchValue} </when>
			<when test="searchOption == 3">AND b.name LIKE CONCAT('%',#{searchValue},'%')</when>
		</choose>
	</sql>
	
	<select id="selectSeq" resultMap="resultMapObj">
		SELECT
			a.*
		FROM purchase a
		WHERE 1=1
			AND	purchaseSeq = #{purchaseSeq}
	</select>	
	
	<insert id="insert">
		INSERT INTO purchase(
			member_memberSeq
			,transport_transportSeq
			,payment
			,purchaseStatus
			,delNy
		)
		VALUES(
			#{member_memberSeq}
			,#{transport_transportSeq}
			,#{payment}
			,#{purchaseStatus}
			,0
		)
		<selectKey resultType="String" keyProperty="purchaseSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	<!-- 구매시 책의 이름 책의 숫자까지 기입 가능해야함 -->
	<update id="update">
		UPDATE purchase
		SET
			member_memberSeq = member_memberSeq
			,transport_transportSeq = transport_transportSeq
			,payment = payment
			,purchaseStatus = purchaseStatus
			,delNy = delNy
		WHERE 1=1
			AND	bookSeq = #{bookSeq}
	</update>
	
	<update id = "uelete">
		UPDATE purchase
		SET
			delNy = 1
		WHERE 1=1
			AND	bookSeq = #{bookSeq}
	</update>
	
	<delete id = "delete">
		DELETE 
		FROM purchase 
		WHERE 1=1 
			AND	purchaseSeq = #{purchaseSeq}
	</delete>
	
	<select id="selectListWithoutPaging" resultMap="resultMapObj">
		SELECT
			a.purchaseSeq
		FROM purchase a
		WHERE 1=1
			AND delNy = 0
		ORDER NY a.purchaseSeq DESC
	</select>
	
	<select id="selectOneCount" resultType="Integer">
		SELECT COUNT(*)
		FROM purchase a
		JOIN member b on a.member_memberSeq = b.memberSeq
		where 1=1
		<if test="searchDelNy != null and !searchDelNy.equals('')">AND delNy = #{searchDelNy}</if>
		<if test="searchPayment != null and !searchPayment.equals('')">AND payment = #{searchPayment}</if>
		<if test="searchPurchaseStatus != null and !searchPurchaseStatus.equals('')">AND purchaseStatus = #{searchPurchaseStatus}</if>
		<choose>
			<when test="searchOption == 1">AND purchaseSeq = #{searchValue}</when>
			<when test="searchOption == 2">AND member_memberSeq = #{searchValue} </when>
			<when test="searchOption == 3">AND b.name LIKE CONCAT('%',#{searchValue},'%')</when>
		</choose>
	</select>
	
	<!-- user count -->
	
	<select id="purchaseBookSeq">
	select
		bookSeq
		,name
		,sign
		,cost*(1-sale) as price
	from book a
	where 1=1
	
	</select>
	
	<select id="transportSeq" resultMap="resultMapObj">
		SELECT
			a.*
		FROM transport a
		WHERE 1=1
			AND member_memberSeq = #{sessSeq}
	</select>
	
	<insert id="transportInsert">
		INSERT INTO transport (
			member_memberSeq
			,transportDiv
			,phone
			,home
			,zip
			,address1
			,address2
			,lng
			,lat
			,useNy
			,delNy
		)
		VALUES (
		
			#{member_memberSeq}
			,#{transportDiv}
			,#{phone}
			,#{home}
			,#{zip}
			,#{address1}
			,#{address2}
			,#{lng}
			,#{lat}
			,1
			,0
		
		)
		<selectKey resultType="String" keyProperty="transportSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>

	<update id="transportUpdate">
	UPDATE transport
	SET
		member_memberSeq = #{member_memberSeq}
		,transportDiv = #{transportDiv}
		,phone = #{phone}
		,home = #{home}
		,zip = #{zip}
		,address1 = #{address1}
		,address2 = #{address2}
		,lng = #{lng}
		,lat = #{lat}
		,useNy = #{useNy}
		,delNy = #{delNy}
	WHERE 1=1
		AND transportSeq = #{transportSeq}
	</update>
	
	<insert id="bookPurchaseInsert">
		INSERT INTO book_purchase (
			purchase_purchaseSeq
			,book_bookSeq
			,count
			,price
		)
		VALUES (
		
			#{purchaseSeq}
			,#{bookSeq}
			,#{count}
			,#{price}
		
		)
		<selectKey resultType="String" keyProperty="purchase_bookSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
</mapper>	