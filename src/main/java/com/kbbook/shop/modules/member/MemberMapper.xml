<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kbbook.shop.modules.member.MemberMapper">

    <resultMap id="resultMapObj" type="com.kbbook.shop.modules.member.Member"></resultMap>
	
	<select id="selectList" resultMap="resultMapObj">
		<include refid="Base.selectListUpperForMysql" />
		SELECT
			a.*
		<include refid="selectCommon" />
		ORDER BY a.memberSeq DESC
		<include refid="Base.selectListLowerForMysql" />
	</select>
	
	<select id="selectSeq" resultMap="resultMapObj">
		SELECT
			a.*
		FROM member a
		WHERE 1=1
			AND	memberSeq = #{memberSeq}
	</select>
	
	<select id="getTime" resultType="String">
	
	Select NOW()
	
	</select>
	
	<insert id ="insert">
		INSERT INTO member (
			id
			,password
			,name
			,userName
			,gender
			,dob
			,phone
			,email
			,emailStart
			,emailEnd
			,emailLast
			,zip
			,address1
			,address2
			,privacy
			,email_ctr
			,kakao_ctr
			,sms_ctr
			,accmulate
			,memberDelNy
			,memberUseNy
			,dminDiv
		)
		VALUES (
			#{id}
			,#{password}
			,#{name}
			,#{userName}
			,#{gender}
			,#{dob}
			,#{phone}
			,#{email}
			,#{emailStart}
			,#{emailEnd}
			,#{emailLast}
			,#{zip}
			,#{address1}
			,#{address2}
			,#{privacy}
			,#{email_ctr}
			,#{kakao_ctr}
			,#{sms_ctr}
			,0
			,0
			,1
			,1
		)
		<selectKey resultType="String" keyProperty="memberSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
	<update id="update">
		UPDATE member
		SET
			id = #{id}
			,password = #{password}
			,name = #{name}
			,userName = #{userName}
			,gender = #{gender}
			,dob = #{dob}
			,phone = #{phone}
			,email = #{email}
			,emailStart = #{emailStart}
			,emailEnd = #{emailEnd}
			,emailLast = #{emailLast}
			,zip = #{zip}
			,address1 = #{address1}
			,address2 = #{address2}
			,privacy = #{privacy}
			,email_ctr = #{email_ctr}
			,kakao_ctr = #{kakao_ctr}
			,sms_ctr = #{sms_ctr}
			,accmulate = #{accmulate}
			,memberDelNy = #{memberDelNy}
			,memberUseNy = #{memberUseNy}
		WHERE 1=1
			AND	memberSeq = #{memberSeq}
	</update>
	<update id="userUpdate">
	UPDATE member
		SET
			userName = #{userName}
			,phone = #{phone}
			,email = #{email}
			,emailStart = #{emailStart}
			,emailEnd = #{emailEnd}
			,emailLast = #{emailLast}
			,zip = #{zip}
			,address1 = #{address1}
			,address2 = #{address2}
			,privacy = #{privacy}
			,email_ctr = #{email_ctr}
			,kakao_ctr = #{kakao_ctr}
			,sms_ctr = #{sms_ctr}
		WHERE 1=1
			AND	memberSeq = #{memberSeq}
	</update>
	
	<update id = "uelete">
		UPDATE member
		SET
			memberDelNy = 1
		WHERE 1=1
			AND	memberSeq = #{memberSeq}
	</update>

	<delete id = "delete">
		DELETE 
		FROM member 
		WHERE 1=1 
			AND	memberSeq = #{memberSeq}
	</delete>
	
	<select id="selectListWithoutPaging" resultMap="resultMapObj">
		SELECT
			a.memberSeq
			,a.name
		FROM member a
		WHERE 1=1
			AND memberDelNy = 0
			AND memberUseNy = 1
		ORDER BY a.memberSeq DESC
	</select>
	
	<sql id="selectCommon">
		FROM member a
		WHERE 1=1
			AND dminDiv = 1
			<!-- AND memberDelNy = 0 -->
			<if test="searchDelNy != null and !searchDelNy.equals('')">AND memberDelNy = #{searchDelNy}</if>
			<if test="searchGender != null and !searchGender.equals('')">AND gender = #{searchGender}</if>
			<if test="searchPrivacy != null and !searchPrivacy.equals('')">AND privacy = #{searchPrivacy}</if>
			<choose>
				<when test="searchOption == 1">AND memberSeq = #{searchValue}</when>
				<when test="searchOption == 2">AND name LIKE CONCAT('%',#{searchValue},'%')</when>
				<when test="searchOption == 3">AND id LIKE CONCAT('%',#{searchValue},'%')</when>
				<when test="searchOption == 4">AND userName LIKE CONCAT('%',#{searchValue},'%')</when>
				<when test="searchOption == 5">AND email LIKE CONCAT('%',#{searchValue},'%')</when>
				<otherwise></otherwise>
			</choose>
	</sql>
	
	<select id="selectOneCount" resultType="Integer">
		SELECT COUNT(*)
		<include refid="selectCommon" />
	</select>
	
	<select id="selectOneId" resultMap="resultMapObj">
		SELECT
			memberSeq
			,id
		FROM
			member a
		WHERE 1=1
			AND dminDiv = 1
			AND id = #{id}
	</select>
	
	<select id="selectOneLogin" resultMap="resultMapObj">
		SELECT
			memberSeq
			,id
			,name
			,userName
		FROM
			member a
		WHERE 1=1
			AND dminDiv = 1
			AND id = #{id}
			AND a.password = #{password}
	</select>
	
	<select id="selectOneIdCheck" resultType="Integer">
		SELECT
			 COUNT(id) 
		FROM member
			WHERE 1=1
			AND dminDiv = 1
			AND id = #{id}
	</select>
	
	<select id="findIdPhoneCheck" resultMap="resultMapObj">
		SELECT
			id
		FROM member
		WHERE 1=1
			AND dminDiv = 1
			AND name = #{name}
			AND phone = #{phone}
	</select>
	
	<select id="findIdEmailCheck" resultMap="resultMapObj">
		SELECT
			id
		FROM member
		WHERE 1=1
			AND dminDiv = 1
			AND name = #{name}
			AND email = #{email}
	</select>
	
	<select id="selectOneUserNameCheck" resultType="Integer">
		SELECT
			 COUNT(userName) 
		FROM member
		WHERE 1=1
			AND dminDiv = 1
			AND userName = #{userName}
	</select>
	
	<select id="selectOnePasswordCheck" resultType="Integer">
		SELECT
			 COUNT(*) 
		FROM member a
		WHERE 1=1
			AND dminDiv = 1
			AND id = #{id}
			AND password = #{password}
	</select>
	
	<update id="passwordUpdate">
		UPDATE member
		SET
			password = #{password}
		WHERE 1=1
			AND dminDiv = 1
			AND	memberSeq = #{memberSeq}
	</update>
	
	<select id="selectOrderCount" resultType="Integer">
		SELECT COUNT(*)
		FROM purchase a
		JOIN member b on a.member_memberSeq = b.memberSeq
		WHERE 1=1
		and member_memberSeq = #{memberSeq}
	</select>
	
	<select id="memberOrderList"  resultMap="resultMapObj">
	<include refid="Base.selectListUpperForMysql" />
	SELECT
		a.*
	   ,b.name
	   ,(select
	   case
	   when count(d.name) = 1 then d.name
	   when count(d.name) > 1 then concat(min(d.name) , ' 외 ' , cast(COUNT(name) as char)-1 , ' 건' )
	   end
	   FROM purchase_book c
	   JOIN book d on d.bookSeq = c.book_bookSeq
	   where 1=1
		and purchase_purchaseSeq = purchaseSeq
	   )as purchaseBook
	   ,(select
		case	
		when count(c.count) = 1 then concat(c.count, '권')
	    when count(c.count) > 1 then concat(max(c.count) , '권 외 ' , cast(COUNT(name) as char)-1 , ' 건' )
		end
	   FROM purchase_book c
	   JOIN book d on d.bookSeq = c.book_bookSeq
	   where 1=1
		and purchase_purchaseSeq = purchaseSeq
	   )as purchaseCount
	   ,(select
	   sum(c.price)
	   from purchase_book c
	   where 1=1
		and purchase_purchaseSeq = purchaseSeq
	   group by purchaseSeq
	   ) as priceSum
	FROM purchase a
	JOIN member b on a.member_memberSeq = b.memberSeq
	where 1=1
		and member_memberSeq = #{memberSeq}
		ORDER BY a.purchaseSeq DESC
	<include refid="Base.selectListLowerForMysql" />
	</select>
	
	<select id="favorite" resultMap="resultMapObj">
	select
		b.bookSeq as bookSeq
		,b.sign as bookSign
	    ,b.name as bookName
	    ,b.cost * (1-b.sale) as bookPrice
	    ,b.cost as bookCost
	    ,seq
		,type
		,defaultNy
		,sort
		,path
		,originalName
		,uuidName
	From favorite a
	join book b on a.book_bookSeq = b.bookSeq
	join bookUploaded c on b.bookSeq = c.pSeq
	where 1=1
		and type = 1
		and a.member_memberSeq = #{sessSeq}
	</select>
	
	<!-- kakao -->
	
	<select id="snsLoginCheck" resultMap="resultMapObj">
	select
		a.*
	from member a
	where 1=1
		and name = #{name}
		and email = #{email}
	</select>
	<insert id ="kakaoInst">
		INSERT INTO member (
			id
			,name
			,userName
			,gender
			<!-- ,dob -->
			,phone
			,email
			,token
			,kakao_ctr
			,accmulate
			,memberDelNy
			,memberUseNy
			,dminDiv
		)
		VALUES (
			#{snsId}
			,#{name}
			,#{name}
			,#{gender}
			<!-- ,#{dob} -->
			,#{phone}
			,#{email}
			,#{token}
			,1
			,0
			,0
			,1
			,1
		)
		<selectKey resultType="String" keyProperty="memberSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
</mapper>	